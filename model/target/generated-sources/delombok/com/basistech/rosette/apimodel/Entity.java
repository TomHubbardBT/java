// Generated by delombok at Mon Jan 22 15:21:35 EST 2018
/*
* Copyright 2017 Basis Technology Corp.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
package com.basistech.rosette.apimodel;

import com.basistech.rosette.annotations.JacksonMixin;
import java.util.List;

/**
 * Extracted entity
 */
@JacksonMixin
public final class Entity {
    /**
     */
    private final String type;
    /**
     */
    private final String mention;
    /**
     */
    private final String normalized;
    /**
     */
    private final Integer count;
    /**
     */
    private final List<MentionOffsets> mentionOffsets;
    /**
     *
     * the resulting string will begin with 'Q'. If it was not linked to a knowledge base,
     * it will begin with a 'T'. 'T' identifiers represent intra-document co-references.
     */
    private final String entityId;
    /**
     */
    private final Double confidence;
    /**
     */
    private final Double linkingConfidence;
    /**
     */
    private final Double salience;
    /**
     */
    private final Label sentiment;

    @java.beans.ConstructorProperties({"type", "mention", "normalized", "count", "mentionOffsets", "entityId", "confidence", "linkingConfidence", "salience", "sentiment"})
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    Entity(final String type, final String mention, final String normalized, final Integer count, final List<MentionOffsets> mentionOffsets, final String entityId, final Double confidence, final Double linkingConfidence, final Double salience, final Label sentiment) {
        this.type = type;
        this.mention = mention;
        this.normalized = normalized;
        this.count = count;
        this.mentionOffsets = mentionOffsets;
        this.entityId = entityId;
        this.confidence = confidence;
        this.linkingConfidence = linkingConfidence;
        this.salience = salience;
        this.sentiment = sentiment;
    }


    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public static class EntityBuilder {
        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        private String type;
        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        private String mention;
        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        private String normalized;
        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        private Integer count;
        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        private List<MentionOffsets> mentionOffsets;
        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        private String entityId;
        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        private Double confidence;
        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        private Double linkingConfidence;
        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        private Double salience;
        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        private Label sentiment;

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        EntityBuilder() {
        }

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public EntityBuilder type(final String type) {
            this.type = type;
            return this;
        }

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public EntityBuilder mention(final String mention) {
            this.mention = mention;
            return this;
        }

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public EntityBuilder normalized(final String normalized) {
            this.normalized = normalized;
            return this;
        }

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public EntityBuilder count(final Integer count) {
            this.count = count;
            return this;
        }

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public EntityBuilder mentionOffsets(final List<MentionOffsets> mentionOffsets) {
            this.mentionOffsets = mentionOffsets;
            return this;
        }

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public EntityBuilder entityId(final String entityId) {
            this.entityId = entityId;
            return this;
        }

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public EntityBuilder confidence(final Double confidence) {
            this.confidence = confidence;
            return this;
        }

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public EntityBuilder linkingConfidence(final Double linkingConfidence) {
            this.linkingConfidence = linkingConfidence;
            return this;
        }

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public EntityBuilder salience(final Double salience) {
            this.salience = salience;
            return this;
        }

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public EntityBuilder sentiment(final Label sentiment) {
            this.sentiment = sentiment;
            return this;
        }

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public Entity build() {
            return new Entity(type, mention, normalized, count, mentionOffsets, entityId, confidence, linkingConfidence, salience, sentiment);
        }

        @Override
        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public String toString() {
            return "Entity.EntityBuilder(type=" + this.type + ", mention=" + this.mention + ", normalized=" + this.normalized + ", count=" + this.count + ", mentionOffsets=" + this.mentionOffsets + ", entityId=" + this.entityId + ", confidence=" + this.confidence + ", linkingConfidence=" + this.linkingConfidence + ", salience=" + this.salience + ", sentiment=" + this.sentiment + ")";
        }
    }

    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public static EntityBuilder builder() {
        return new EntityBuilder();
    }

    /**
     * @return the entity type
     */
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public String getType() {
        return this.type;
    }

    /**
     * @return the entity mention text
     */
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public String getMention() {
        return this.mention;
    }

    /**
     * @return the normalized entity mention text
     */
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public String getNormalized() {
        return this.normalized;
    }

    /**
     * @return the entity mention count
     */
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public Integer getCount() {
        return this.count;
    }

    /**
     * @return the list of offsets for all mentions
     */
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public List<MentionOffsets> getMentionOffsets() {
        return this.mentionOffsets;
    }

    /**
     * @return the ID of this entity. If this entity was linked to a knowledge base,
     * the resulting string will begin with 'Q'. If it was not linked to a knowledge base,
     * it will begin with a 'T'. 'T' identifiers represent intra-document co-references.
     */
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public String getEntityId() {
        return this.entityId;
    }

    /**
     * @return the confidence score for the entity (0.0-1.0)
     */
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public Double getConfidence() {
        return this.confidence;
    }

    /**
     * @return the confidence score for linking the entity to the knowledge base (0.0-1.0)
     */
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public Double getLinkingConfidence() {
        return this.linkingConfidence;
    }

    /**
     * @return the salience score for the entity (0.0|1.0)
     */
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public Double getSalience() {
        return this.salience;
    }

    /**
     * @return the sentiment information.
     */
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public Label getSentiment() {
        return this.sentiment;
    }

    @Override
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public boolean equals(final Object o) {
        if (o == this) return true;
        if (!(o instanceof Entity)) return false;
        final Entity other = (Entity) o;
        final Object this$type = this.getType();
        final Object other$type = other.getType();
        if (this$type == null ? other$type != null : !this$type.equals(other$type)) return false;
        final Object this$mention = this.getMention();
        final Object other$mention = other.getMention();
        if (this$mention == null ? other$mention != null : !this$mention.equals(other$mention)) return false;
        final Object this$normalized = this.getNormalized();
        final Object other$normalized = other.getNormalized();
        if (this$normalized == null ? other$normalized != null : !this$normalized.equals(other$normalized)) return false;
        final Object this$count = this.getCount();
        final Object other$count = other.getCount();
        if (this$count == null ? other$count != null : !this$count.equals(other$count)) return false;
        final Object this$mentionOffsets = this.getMentionOffsets();
        final Object other$mentionOffsets = other.getMentionOffsets();
        if (this$mentionOffsets == null ? other$mentionOffsets != null : !this$mentionOffsets.equals(other$mentionOffsets)) return false;
        final Object this$entityId = this.getEntityId();
        final Object other$entityId = other.getEntityId();
        if (this$entityId == null ? other$entityId != null : !this$entityId.equals(other$entityId)) return false;
        final Object this$confidence = this.getConfidence();
        final Object other$confidence = other.getConfidence();
        if (this$confidence == null ? other$confidence != null : !this$confidence.equals(other$confidence)) return false;
        final Object this$linkingConfidence = this.getLinkingConfidence();
        final Object other$linkingConfidence = other.getLinkingConfidence();
        if (this$linkingConfidence == null ? other$linkingConfidence != null : !this$linkingConfidence.equals(other$linkingConfidence)) return false;
        final Object this$salience = this.getSalience();
        final Object other$salience = other.getSalience();
        if (this$salience == null ? other$salience != null : !this$salience.equals(other$salience)) return false;
        final Object this$sentiment = this.getSentiment();
        final Object other$sentiment = other.getSentiment();
        if (this$sentiment == null ? other$sentiment != null : !this$sentiment.equals(other$sentiment)) return false;
        return true;
    }

    @Override
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final Object $type = this.getType();
        result = result * PRIME + ($type == null ? 43 : $type.hashCode());
        final Object $mention = this.getMention();
        result = result * PRIME + ($mention == null ? 43 : $mention.hashCode());
        final Object $normalized = this.getNormalized();
        result = result * PRIME + ($normalized == null ? 43 : $normalized.hashCode());
        final Object $count = this.getCount();
        result = result * PRIME + ($count == null ? 43 : $count.hashCode());
        final Object $mentionOffsets = this.getMentionOffsets();
        result = result * PRIME + ($mentionOffsets == null ? 43 : $mentionOffsets.hashCode());
        final Object $entityId = this.getEntityId();
        result = result * PRIME + ($entityId == null ? 43 : $entityId.hashCode());
        final Object $confidence = this.getConfidence();
        result = result * PRIME + ($confidence == null ? 43 : $confidence.hashCode());
        final Object $linkingConfidence = this.getLinkingConfidence();
        result = result * PRIME + ($linkingConfidence == null ? 43 : $linkingConfidence.hashCode());
        final Object $salience = this.getSalience();
        result = result * PRIME + ($salience == null ? 43 : $salience.hashCode());
        final Object $sentiment = this.getSentiment();
        result = result * PRIME + ($sentiment == null ? 43 : $sentiment.hashCode());
        return result;
    }

    @Override
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public String toString() {
        return "Entity(type=" + this.getType() + ", mention=" + this.getMention() + ", normalized=" + this.getNormalized() + ", count=" + this.getCount() + ", mentionOffsets=" + this.getMentionOffsets() + ", entityId=" + this.getEntityId() + ", confidence=" + this.getConfidence() + ", linkingConfidence=" + this.getLinkingConfidence() + ", salience=" + this.getSalience() + ", sentiment=" + this.getSentiment() + ")";
    }
}
