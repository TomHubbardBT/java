// Generated by delombok at Mon Jan 22 15:21:35 EST 2018
/*
* Copyright 2017 Basis Technology Corp.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
package com.basistech.rosette.apimodel;

import com.basistech.rosette.annotations.JacksonMixin;

/**
 * Data from informational request such as version, build, and support info
 */
@JacksonMixin
public class ConstantsResponse extends Response {
    /**
     */
    private final String version;
    /**
     */
    private final String build;
    /**
     */
    private final Object support;

    @java.beans.ConstructorProperties({"version", "build", "support"})
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    ConstantsResponse(final String version, final String build, final Object support) {
        this.version = version;
        this.build = build;
        this.support = support;
    }


    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public static class ConstantsResponseBuilder {
        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        private String version;
        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        private String build;
        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        private Object support;

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        ConstantsResponseBuilder() {
        }

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public ConstantsResponseBuilder version(final String version) {
            this.version = version;
            return this;
        }

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public ConstantsResponseBuilder build(final String build) {
            this.build = build;
            return this;
        }

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public ConstantsResponseBuilder support(final Object support) {
            this.support = support;
            return this;
        }

        @Override
        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public String toString() {
            return "ConstantsResponse.ConstantsResponseBuilder(version=" + this.version + ", build=" + this.build + ", support=" + this.support + ")";
        }
    }

    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public static ConstantsResponseBuilder builder() {
        return new ConstantsResponseBuilder();
    }

    /**
     * @return the version of Rosette API
     */
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public String getVersion() {
        return this.version;
    }

    /**
     * @return the Rosette API build info
     */
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public String getBuild() {
        return this.build;
    }

    /**
     * @return support (reserved for future feature)
     */
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public Object getSupport() {
        return this.support;
    }

    @Override
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public boolean equals(final Object o) {
        if (o == this) return true;
        if (!(o instanceof ConstantsResponse)) return false;
        final ConstantsResponse other = (ConstantsResponse) o;
        if (!other.canEqual((Object) this)) return false;
        if (!super.equals(o)) return false;
        final Object this$version = this.getVersion();
        final Object other$version = other.getVersion();
        if (this$version == null ? other$version != null : !this$version.equals(other$version)) return false;
        final Object this$build = this.getBuild();
        final Object other$build = other.getBuild();
        if (this$build == null ? other$build != null : !this$build.equals(other$build)) return false;
        final Object this$support = this.getSupport();
        final Object other$support = other.getSupport();
        if (this$support == null ? other$support != null : !this$support.equals(other$support)) return false;
        return true;
    }

    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    protected boolean canEqual(final Object other) {
        return other instanceof ConstantsResponse;
    }

    @Override
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        result = result * PRIME + super.hashCode();
        final Object $version = this.getVersion();
        result = result * PRIME + ($version == null ? 43 : $version.hashCode());
        final Object $build = this.getBuild();
        result = result * PRIME + ($build == null ? 43 : $build.hashCode());
        final Object $support = this.getSupport();
        result = result * PRIME + ($support == null ? 43 : $support.hashCode());
        return result;
    }
}
