// Generated by delombok at Wed Dec 12 18:59:26 EST 2018
/*
* Copyright 2018 Basis Technology Corp.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
package com.basistech.rosette.apimodel;

import com.basistech.rosette.annotations.JacksonMixin;

/**
 * Text embedding options
 */
@JacksonMixin
public final class TextEmbeddingOptions extends Options {
    /**
     */
    private final Boolean perToken;

    @java.beans.ConstructorProperties({"perToken"})
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    TextEmbeddingOptions(final Boolean perToken) {
        this.perToken = perToken;
    }


    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public static class TextEmbeddingOptionsBuilder {
        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        private Boolean perToken;

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        TextEmbeddingOptionsBuilder() {
        }

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public TextEmbeddingOptionsBuilder perToken(final Boolean perToken) {
            this.perToken = perToken;
            return this;
        }

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public TextEmbeddingOptions build() {
            return new TextEmbeddingOptions(perToken);
        }

        @Override
        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public String toString() {
            return "TextEmbeddingOptions.TextEmbeddingOptionsBuilder(perToken=" + this.perToken + ")";
        }
    }

    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public static TextEmbeddingOptionsBuilder builder() {
        return new TextEmbeddingOptionsBuilder();
    }

    /**
     * @return whether embeddings should be returned for each token in addition to the whole document
     */
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public Boolean getPerToken() {
        return this.perToken;
    }

    @Override
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public boolean equals(final Object o) {
        if (o == this) return true;
        if (!(o instanceof TextEmbeddingOptions)) return false;
        final TextEmbeddingOptions other = (TextEmbeddingOptions) o;
        if (!other.canEqual((Object) this)) return false;
        if (!super.equals(o)) return false;
        final Object this$perToken = this.getPerToken();
        final Object other$perToken = other.getPerToken();
        if (this$perToken == null ? other$perToken != null : !this$perToken.equals(other$perToken)) return false;
        return true;
    }

    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    protected boolean canEqual(final Object other) {
        return other instanceof TextEmbeddingOptions;
    }

    @Override
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        result = result * PRIME + super.hashCode();
        final Object $perToken = this.getPerToken();
        result = result * PRIME + ($perToken == null ? 43 : $perToken.hashCode());
        return result;
    }

    @Override
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public String toString() {
        return "TextEmbeddingOptions(perToken=" + this.getPerToken() + ")";
    }
}
