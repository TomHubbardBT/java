// Generated by delombok at Mon Jan 22 15:21:35 EST 2018
/*
* Copyright 2017 Basis Technology Corp.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
package com.basistech.rosette.apimodel;

import com.basistech.rosette.annotations.JacksonMixin;

/**
 * Rosette API information
 */
@JacksonMixin
public class InfoResponse extends Response {
    /**
     */
    private final String name;
    /**
     */
    private final String version;
    /**
     */
    private final String buildNumber;
    /**
     */
    private final String buildTime;
    /**
     */
    private final Boolean versionChecked;

    @java.beans.ConstructorProperties({"name", "version", "buildNumber", "buildTime", "versionChecked"})
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    InfoResponse(final String name, final String version, final String buildNumber, final String buildTime, final Boolean versionChecked) {
        this.name = name;
        this.version = version;
        this.buildNumber = buildNumber;
        this.buildTime = buildTime;
        this.versionChecked = versionChecked;
    }


    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public static class InfoResponseBuilder {
        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        private String name;
        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        private String version;
        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        private String buildNumber;
        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        private String buildTime;
        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        private Boolean versionChecked;

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        InfoResponseBuilder() {
        }

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public InfoResponseBuilder name(final String name) {
            this.name = name;
            return this;
        }

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public InfoResponseBuilder version(final String version) {
            this.version = version;
            return this;
        }

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public InfoResponseBuilder buildNumber(final String buildNumber) {
            this.buildNumber = buildNumber;
            return this;
        }

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public InfoResponseBuilder buildTime(final String buildTime) {
            this.buildTime = buildTime;
            return this;
        }

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public InfoResponseBuilder versionChecked(final Boolean versionChecked) {
            this.versionChecked = versionChecked;
            return this;
        }

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public InfoResponse build() {
            return new InfoResponse(name, version, buildNumber, buildTime, versionChecked);
        }

        @Override
        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public String toString() {
            return "InfoResponse.InfoResponseBuilder(name=" + this.name + ", version=" + this.version + ", buildNumber=" + this.buildNumber + ", buildTime=" + this.buildTime + ", versionChecked=" + this.versionChecked + ")";
        }
    }

    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public static InfoResponseBuilder builder() {
        return new InfoResponseBuilder();
    }

    /**
     * @return the name
     */
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public String getName() {
        return this.name;
    }

    /**
     * @return the version
     */
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public String getVersion() {
        return this.version;
    }

    /**
     * @return the build number
     */
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public String getBuildNumber() {
        return this.buildNumber;
    }

    /**
     * @return the build time
     */
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public String getBuildTime() {
        return this.buildTime;
    }

    /**
     * @return client version checked
     */
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public Boolean getVersionChecked() {
        return this.versionChecked;
    }

    @Override
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public boolean equals(final Object o) {
        if (o == this) return true;
        if (!(o instanceof InfoResponse)) return false;
        final InfoResponse other = (InfoResponse) o;
        if (!other.canEqual((Object) this)) return false;
        if (!super.equals(o)) return false;
        final Object this$name = this.getName();
        final Object other$name = other.getName();
        if (this$name == null ? other$name != null : !this$name.equals(other$name)) return false;
        final Object this$version = this.getVersion();
        final Object other$version = other.getVersion();
        if (this$version == null ? other$version != null : !this$version.equals(other$version)) return false;
        final Object this$buildNumber = this.getBuildNumber();
        final Object other$buildNumber = other.getBuildNumber();
        if (this$buildNumber == null ? other$buildNumber != null : !this$buildNumber.equals(other$buildNumber)) return false;
        final Object this$buildTime = this.getBuildTime();
        final Object other$buildTime = other.getBuildTime();
        if (this$buildTime == null ? other$buildTime != null : !this$buildTime.equals(other$buildTime)) return false;
        final Object this$versionChecked = this.getVersionChecked();
        final Object other$versionChecked = other.getVersionChecked();
        if (this$versionChecked == null ? other$versionChecked != null : !this$versionChecked.equals(other$versionChecked)) return false;
        return true;
    }

    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    protected boolean canEqual(final Object other) {
        return other instanceof InfoResponse;
    }

    @Override
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        result = result * PRIME + super.hashCode();
        final Object $name = this.getName();
        result = result * PRIME + ($name == null ? 43 : $name.hashCode());
        final Object $version = this.getVersion();
        result = result * PRIME + ($version == null ? 43 : $version.hashCode());
        final Object $buildNumber = this.getBuildNumber();
        result = result * PRIME + ($buildNumber == null ? 43 : $buildNumber.hashCode());
        final Object $buildTime = this.getBuildTime();
        result = result * PRIME + ($buildTime == null ? 43 : $buildTime.hashCode());
        final Object $versionChecked = this.getVersionChecked();
        result = result * PRIME + ($versionChecked == null ? 43 : $versionChecked.hashCode());
        return result;
    }
}
