// Generated by delombok at Mon Jan 22 15:21:35 EST 2018
/*
* Copyright 2017 Basis Technology Corp.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
package com.basistech.rosette.apimodel;

import com.basistech.rosette.annotations.JacksonMixin;

/**
 * Sentiment Analysis and Categorization return labels. A label is
 * a category name, a confidence value,
 * that contributed to the determination.
 * For Sentiment, the label strings are items like 'pos' or 'neg';
 * for Categorization, 'sports' or 'news'.
 */
@JacksonMixin
public final class Label {
    /**
     */
    private final String label;
    /**
     */
    private final Double confidence;

    @java.beans.ConstructorProperties({"label", "confidence"})
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    Label(final String label, final Double confidence) {
        this.label = label;
        this.confidence = confidence;
    }


    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public static class LabelBuilder {
        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        private String label;
        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        private Double confidence;

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        LabelBuilder() {
        }

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public LabelBuilder label(final String label) {
            this.label = label;
            return this;
        }

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public LabelBuilder confidence(final Double confidence) {
            this.confidence = confidence;
            return this;
        }

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public Label build() {
            return new Label(label, confidence);
        }

        @Override
        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public String toString() {
            return "Label.LabelBuilder(label=" + this.label + ", confidence=" + this.confidence + ")";
        }
    }

    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public static LabelBuilder builder() {
        return new LabelBuilder();
    }

    /**
     * @return the label.
     */
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public String getLabel() {
        return this.label;
    }

    /**
     * @return the confidence score  (0.0-1.0)
     */
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public Double getConfidence() {
        return this.confidence;
    }

    @Override
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public boolean equals(final Object o) {
        if (o == this) return true;
        if (!(o instanceof Label)) return false;
        final Label other = (Label) o;
        final Object this$label = this.getLabel();
        final Object other$label = other.getLabel();
        if (this$label == null ? other$label != null : !this$label.equals(other$label)) return false;
        final Object this$confidence = this.getConfidence();
        final Object other$confidence = other.getConfidence();
        if (this$confidence == null ? other$confidence != null : !this$confidence.equals(other$confidence)) return false;
        return true;
    }

    @Override
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final Object $label = this.getLabel();
        result = result * PRIME + ($label == null ? 43 : $label.hashCode());
        final Object $confidence = this.getConfidence();
        result = result * PRIME + ($confidence == null ? 43 : $confidence.hashCode());
        return result;
    }

    @Override
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public String toString() {
        return "Label(label=" + this.getLabel() + ", confidence=" + this.getConfidence() + ")";
    }
}
