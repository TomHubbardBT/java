// Generated by delombok at Mon Jan 22 15:21:35 EST 2018
/*
* Copyright 2017 Basis Technology Corp.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
package com.basistech.rosette.apimodel;

import com.basistech.rosette.annotations.JacksonMixin;
import java.util.List;

/**
 * Simple API response data model returned by MorphologyRequest
 */
@JacksonMixin
public class MorphologyResponse extends Response {
    /**
     */
    private final List<String> tokens;
    /**
     */
    private final List<String> posTags;
    /**
     */
    private final List<String> lemmas;
    /**
     */
    private final List<List<String>> compoundComponents;
    /**
     */
    private final List<List<String>> hanReadings;

    @java.beans.ConstructorProperties({"tokens", "posTags", "lemmas", "compoundComponents", "hanReadings"})
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    MorphologyResponse(final List<String> tokens, final List<String> posTags, final List<String> lemmas, final List<List<String>> compoundComponents, final List<List<String>> hanReadings) {
        this.tokens = tokens;
        this.posTags = posTags;
        this.lemmas = lemmas;
        this.compoundComponents = compoundComponents;
        this.hanReadings = hanReadings;
    }


    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public static class MorphologyResponseBuilder {
        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        private List<String> tokens;
        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        private List<String> posTags;
        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        private List<String> lemmas;
        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        private List<List<String>> compoundComponents;
        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        private List<List<String>> hanReadings;

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        MorphologyResponseBuilder() {
        }

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public MorphologyResponseBuilder tokens(final List<String> tokens) {
            this.tokens = tokens;
            return this;
        }

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public MorphologyResponseBuilder posTags(final List<String> posTags) {
            this.posTags = posTags;
            return this;
        }

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public MorphologyResponseBuilder lemmas(final List<String> lemmas) {
            this.lemmas = lemmas;
            return this;
        }

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public MorphologyResponseBuilder compoundComponents(final List<List<String>> compoundComponents) {
            this.compoundComponents = compoundComponents;
            return this;
        }

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public MorphologyResponseBuilder hanReadings(final List<List<String>> hanReadings) {
            this.hanReadings = hanReadings;
            return this;
        }

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public MorphologyResponse build() {
            return new MorphologyResponse(tokens, posTags, lemmas, compoundComponents, hanReadings);
        }

        @Override
        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public String toString() {
            return "MorphologyResponse.MorphologyResponseBuilder(tokens=" + this.tokens + ", posTags=" + this.posTags + ", lemmas=" + this.lemmas + ", compoundComponents=" + this.compoundComponents + ", hanReadings=" + this.hanReadings + ")";
        }
    }

    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public static MorphologyResponseBuilder builder() {
        return new MorphologyResponseBuilder();
    }

    /**
     * @return list of tokens
     */
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public List<String> getTokens() {
        return this.tokens;
    }

    /**
     * @return list of part of speech tags, 1:1 with tokens, or {@code null}
     */
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public List<String> getPosTags() {
        return this.posTags;
    }

    /**
     * @return list of lemmas, 1:1 with tokens, or {@code null}
     */
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public List<String> getLemmas() {
        return this.lemmas;
    }

    /**
     * @return list of compound components, 1:1 with tokens, or {@code null}
     */
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public List<List<String>> getCompoundComponents() {
        return this.compoundComponents;
    }

    /**
     * @return list of Han readings, 1:1 with tokens, or {@code null}
     */
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public List<List<String>> getHanReadings() {
        return this.hanReadings;
    }

    @Override
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public boolean equals(final Object o) {
        if (o == this) return true;
        if (!(o instanceof MorphologyResponse)) return false;
        final MorphologyResponse other = (MorphologyResponse) o;
        if (!other.canEqual((Object) this)) return false;
        if (!super.equals(o)) return false;
        final Object this$tokens = this.getTokens();
        final Object other$tokens = other.getTokens();
        if (this$tokens == null ? other$tokens != null : !this$tokens.equals(other$tokens)) return false;
        final Object this$posTags = this.getPosTags();
        final Object other$posTags = other.getPosTags();
        if (this$posTags == null ? other$posTags != null : !this$posTags.equals(other$posTags)) return false;
        final Object this$lemmas = this.getLemmas();
        final Object other$lemmas = other.getLemmas();
        if (this$lemmas == null ? other$lemmas != null : !this$lemmas.equals(other$lemmas)) return false;
        final Object this$compoundComponents = this.getCompoundComponents();
        final Object other$compoundComponents = other.getCompoundComponents();
        if (this$compoundComponents == null ? other$compoundComponents != null : !this$compoundComponents.equals(other$compoundComponents)) return false;
        final Object this$hanReadings = this.getHanReadings();
        final Object other$hanReadings = other.getHanReadings();
        if (this$hanReadings == null ? other$hanReadings != null : !this$hanReadings.equals(other$hanReadings)) return false;
        return true;
    }

    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    protected boolean canEqual(final Object other) {
        return other instanceof MorphologyResponse;
    }

    @Override
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        result = result * PRIME + super.hashCode();
        final Object $tokens = this.getTokens();
        result = result * PRIME + ($tokens == null ? 43 : $tokens.hashCode());
        final Object $posTags = this.getPosTags();
        result = result * PRIME + ($posTags == null ? 43 : $posTags.hashCode());
        final Object $lemmas = this.getLemmas();
        result = result * PRIME + ($lemmas == null ? 43 : $lemmas.hashCode());
        final Object $compoundComponents = this.getCompoundComponents();
        result = result * PRIME + ($compoundComponents == null ? 43 : $compoundComponents.hashCode());
        final Object $hanReadings = this.getHanReadings();
        result = result * PRIME + ($hanReadings == null ? 43 : $hanReadings.hashCode());
        return result;
    }
}
