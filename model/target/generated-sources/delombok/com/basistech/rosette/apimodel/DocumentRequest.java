// Generated by delombok at Mon Jan 22 15:21:35 EST 2018
/*
* Copyright 2017 Basis Technology Corp.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
package com.basistech.rosette.apimodel;

import com.basistech.util.LanguageCode;
import java.io.ByteArrayInputStream;
import java.io.InputStream;

/**
 * This class represents the common information for all document processing requests to the Rosette API.
 * Most applications do not use this class directly; the methods of the {@code RosetteAPI} class
 * create request objects. More complex applications may create objects of
 * this class for themselves via the {@link DocumentRequest.DocumentRequestBuilder}.
 * <br>
 * On the wire, a request is a json object. All the endpoints accept the same set of items,
 * represented here, that describe the input document.
 * <br>
 * Applications specify the text to process in three ways:
 * <ol>
 * <li>Plain text, as the {@code content} item in the Json object.</li>
 * <li>A binary file image, attached as an additional MIME part to the request.
 * The application provides a MIME content type in {@code contentType}.</li>
 * <li>A URL of a data to download. The application provides the URL in
 * {@code contentUri}. Note that the Rosette API respects the content type
 * returned by the server for downloaded data.</li>
 * </ol>
 * In this object the 'content' item is an {@link Object}; it contains a {@link String}
 * for plain text, or an {@link java.io.InputStream} for binary data. {@link DocumentRequest.DocumentRequestBuilder}
 * provides several alternative methods for setting this information.
 *
 * This class includes a 'genre' field. If no genre is specified, then the system
 * applies generic processing. Valid values for genre are specified in the API documentation.
 */
public final class DocumentRequest<O extends Options> extends Request {
    /**
     */
    private final LanguageCode language;
    /**
     * @return the request content
     */
    private final Object content;
    /**
     */
    private final String contentUri;
    /**
     */
    private final String contentType;
    /**
     */
    private final String genre;
    /**
     */
    private final O options;

    // workaround for inheritance https://github.com/rzwitserloot/lombok/issues/853
    public DocumentRequest(String profileId, LanguageCode language, Object content, String contentUri, String contentType, String genre, O options) {
        super(profileId);
        this.language = language;
        this.content = content;
        this.contentUri = contentUri;
        this.contentType = contentType;
        this.genre = genre;
        this.options = options;
    }

    /**
     * get content to process if it's a String.
     * @return the content if a String, else null.
     */
    public String getContent() {
        if (content instanceof String) {
            return (String) content;
        } else {
            return null;
        }
    }

    /**
     * get the content as an array of bytes
     * @return the content as bytes
     */
    public InputStream getContentBytes() {
        if (content instanceof InputStream) {
            return (InputStream) content;
        } else {
            return null;
        }
    }

    /**
     * get content as an object
     * @return the content as object
     */
    public Object getRawContent() {
        return content;
    }


    public static class DocumentRequestBuilder<O extends Options> {
        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        private String profileId;
        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        private LanguageCode language;
        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        private Object content;
        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        private String contentUri;
        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        private String contentType;
        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        private String genre;
        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        private O options;

        public DocumentRequestBuilder<O> content(String data) {
            this.content = data;
            return this;
            // need more fluent builder methods in addition to lombok defaults
            /**
         * Specify the content as String. Use this for plain text.
         * @param data The data.
         * @return this.
         */
        }

        public DocumentRequestBuilder<O> content(byte[] bytes, String contentType) {
            this.content = new ByteArrayInputStream(bytes);
            this.contentType = contentType;
            return this;
            /**
         * Specify the content as bytes with a content type. Use this for
         * formats other than plain text.
         * @param bytes The data.
         * @param contentType the content type.
         * @return this.
         */
        }

        public DocumentRequestBuilder<O> content(InputStream bytes, String contentType) {
            this.content = bytes;
            this.contentType = contentType;
            return this;
            /**
         * Specify the content as bytes with a content type. Use this for
         * formats other than plain text.
         * @param bytes The data.
         * @param contentType the content type.
         * @return this.
         */
        }

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        DocumentRequestBuilder() {
        }

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public DocumentRequestBuilder<O> profileId(final String profileId) {
            this.profileId = profileId;
            return this;
        }

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public DocumentRequestBuilder<O> language(final LanguageCode language) {
            this.language = language;
            return this;
        }

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public DocumentRequestBuilder<O> contentUri(final String contentUri) {
            this.contentUri = contentUri;
            return this;
        }

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public DocumentRequestBuilder<O> contentType(final String contentType) {
            this.contentType = contentType;
            return this;
        }

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public DocumentRequestBuilder<O> genre(final String genre) {
            this.genre = genre;
            return this;
        }

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public DocumentRequestBuilder<O> options(final O options) {
            this.options = options;
            return this;
        }

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public DocumentRequest<O> build() {
            return new DocumentRequest<O>(profileId, language, content, contentUri, contentType, genre, options);
        }

        @Override
        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public String toString() {
            return "DocumentRequest.DocumentRequestBuilder(profileId=" + this.profileId + ", language=" + this.language + ", content=" + this.content + ", contentUri=" + this.contentUri + ", contentType=" + this.contentType + ", genre=" + this.genre + ", options=" + this.options + ")";
        }
    }

    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public static <O extends Options> DocumentRequestBuilder<O> builder() {
        return new DocumentRequestBuilder<O>();
    }

    /**
     * @return the language code
     */
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public LanguageCode getLanguage() {
        return this.language;
    }

    /**
     * @return the URI of request content
     */
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public String getContentUri() {
        return this.contentUri;
    }

    /**
     * @return request content type
     */
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public String getContentType() {
        return this.contentType;
    }

    /**
     * @return request genre
     */
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public String getGenre() {
        return this.genre;
    }

    /**
     * @return request options
     */
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public O getOptions() {
        return this.options;
    }

    @Override
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public boolean equals(final Object o) {
        if (o == this) return true;
        if (!(o instanceof DocumentRequest)) return false;
        final DocumentRequest<?> other = (DocumentRequest<?>) o;
        if (!other.canEqual((Object) this)) return false;
        if (!super.equals(o)) return false;
        final Object this$language = this.getLanguage();
        final Object other$language = other.getLanguage();
        if (this$language == null ? other$language != null : !this$language.equals(other$language)) return false;
        final Object this$content = this.getContent();
        final Object other$content = other.getContent();
        if (this$content == null ? other$content != null : !this$content.equals(other$content)) return false;
        final Object this$contentUri = this.getContentUri();
        final Object other$contentUri = other.getContentUri();
        if (this$contentUri == null ? other$contentUri != null : !this$contentUri.equals(other$contentUri)) return false;
        final Object this$contentType = this.getContentType();
        final Object other$contentType = other.getContentType();
        if (this$contentType == null ? other$contentType != null : !this$contentType.equals(other$contentType)) return false;
        final Object this$genre = this.getGenre();
        final Object other$genre = other.getGenre();
        if (this$genre == null ? other$genre != null : !this$genre.equals(other$genre)) return false;
        final Object this$options = this.getOptions();
        final Object other$options = other.getOptions();
        if (this$options == null ? other$options != null : !this$options.equals(other$options)) return false;
        return true;
    }

    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    protected boolean canEqual(final Object other) {
        return other instanceof DocumentRequest;
    }

    @Override
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        result = result * PRIME + super.hashCode();
        final Object $language = this.getLanguage();
        result = result * PRIME + ($language == null ? 43 : $language.hashCode());
        final Object $content = this.getContent();
        result = result * PRIME + ($content == null ? 43 : $content.hashCode());
        final Object $contentUri = this.getContentUri();
        result = result * PRIME + ($contentUri == null ? 43 : $contentUri.hashCode());
        final Object $contentType = this.getContentType();
        result = result * PRIME + ($contentType == null ? 43 : $contentType.hashCode());
        final Object $genre = this.getGenre();
        result = result * PRIME + ($genre == null ? 43 : $genre.hashCode());
        final Object $options = this.getOptions();
        result = result * PRIME + ($options == null ? 43 : $options.hashCode());
        return result;
    }

    @Override
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public String toString() {
        return "DocumentRequest(language=" + this.getLanguage() + ", content=" + this.getContent() + ", contentUri=" + this.getContentUri() + ", contentType=" + this.getContentType() + ", genre=" + this.getGenre() + ", options=" + this.getOptions() + ")";
    }
}
