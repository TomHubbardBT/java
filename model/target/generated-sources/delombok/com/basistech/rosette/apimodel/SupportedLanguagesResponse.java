// Generated by delombok at Wed Dec 12 18:59:26 EST 2018
/*
 * Copyright 2018 Basis Technology Corp.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.basistech.rosette.apimodel;

import com.basistech.rosette.annotations.JacksonMixin;
import java.util.Set;

/**
 * Supported languages/scripts for a given endpoint
 */
@JacksonMixin
public class SupportedLanguagesResponse extends Response {
    /**
     */
    private final Set<SupportedLanguage> supportedLanguages;

    @java.beans.ConstructorProperties({"supportedLanguages"})
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    SupportedLanguagesResponse(final Set<SupportedLanguage> supportedLanguages) {
        this.supportedLanguages = supportedLanguages;
    }


    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public static class SupportedLanguagesResponseBuilder {
        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        private Set<SupportedLanguage> supportedLanguages;

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        SupportedLanguagesResponseBuilder() {
        }

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public SupportedLanguagesResponseBuilder supportedLanguages(final Set<SupportedLanguage> supportedLanguages) {
            this.supportedLanguages = supportedLanguages;
            return this;
        }

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public SupportedLanguagesResponse build() {
            return new SupportedLanguagesResponse(supportedLanguages);
        }

        @Override
        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public String toString() {
            return "SupportedLanguagesResponse.SupportedLanguagesResponseBuilder(supportedLanguages=" + this.supportedLanguages + ")";
        }
    }

    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public static SupportedLanguagesResponseBuilder builder() {
        return new SupportedLanguagesResponseBuilder();
    }

    /**
     * @return the set of supported languages/scripts
     */
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public Set<SupportedLanguage> getSupportedLanguages() {
        return this.supportedLanguages;
    }

    @Override
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public boolean equals(final Object o) {
        if (o == this) return true;
        if (!(o instanceof SupportedLanguagesResponse)) return false;
        final SupportedLanguagesResponse other = (SupportedLanguagesResponse) o;
        if (!other.canEqual((Object) this)) return false;
        if (!super.equals(o)) return false;
        final Object this$supportedLanguages = this.getSupportedLanguages();
        final Object other$supportedLanguages = other.getSupportedLanguages();
        if (this$supportedLanguages == null ? other$supportedLanguages != null : !this$supportedLanguages.equals(other$supportedLanguages)) return false;
        return true;
    }

    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    protected boolean canEqual(final Object other) {
        return other instanceof SupportedLanguagesResponse;
    }

    @Override
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        result = result * PRIME + super.hashCode();
        final Object $supportedLanguages = this.getSupportedLanguages();
        result = result * PRIME + ($supportedLanguages == null ? 43 : $supportedLanguages.hashCode());
        return result;
    }
}
