// Generated by delombok at Mon Jan 22 15:21:35 EST 2018
/*
* Copyright 2017 Basis Technology Corp.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
package com.basistech.rosette.apimodel;

import com.basistech.rosette.annotations.JacksonMixin;
import com.basistech.rosette.util.EncodingCode;
import com.basistech.util.LanguageCode;
import javax.validation.constraints.DecimalMax;
import javax.validation.constraints.DecimalMin;
import javax.validation.constraints.Min;
import java.util.Set;

/**
 * Languages detection options
 */
@JacksonMixin
public final class LanguageOptions extends Options {
    /**
     */
    private final Boolean multilingual;
    /**
     */
    @Min(1)
    private final Integer minValidChars;
    /**
     */
    @Min(1)
    private final Integer profileDepth;
    /**
     */
    @DecimalMin("0.0")
    @DecimalMax("100.0")
    private final Double ambiguityThreshold;
    /**
     */
    @DecimalMin("0.0")
    @DecimalMax("100.0")
    private final Double invalidityThreshold;
    /**
     */
    private final LanguageCode languageHint;
    /**
     *
     * A value of N reduces the distance of correctly hinted ambiguous result by N%.
     * Value of 1.0 is the lightest hint, value of 99.0 the strongest.
     */
    @DecimalMin("1.0")
    @DecimalMax("99.0")
    private final Double languageHintWeight;
    /**
     */
    private final EncodingCode encodingHint;
    /**
     *
     * A value of N reduces the distance of correctly hinted result by N%.
     * A value of 100 forces the detector to consider only the results with the hinted encoding.
     */
    @DecimalMin("1.0")
    @DecimalMax("100.0")
    private final Double encodingHintWeight;
    /**
     */
    private final Set<LanguageWeight> languageWeightAdjustments;

    @java.beans.ConstructorProperties({"multilingual", "minValidChars", "profileDepth", "ambiguityThreshold", "invalidityThreshold", "languageHint", "languageHintWeight", "encodingHint", "encodingHintWeight", "languageWeightAdjustments"})
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    LanguageOptions(final Boolean multilingual, final Integer minValidChars, final Integer profileDepth, final Double ambiguityThreshold, final Double invalidityThreshold, final LanguageCode languageHint, final Double languageHintWeight, final EncodingCode encodingHint, final Double encodingHintWeight, final Set<LanguageWeight> languageWeightAdjustments) {
        this.multilingual = multilingual;
        this.minValidChars = minValidChars;
        this.profileDepth = profileDepth;
        this.ambiguityThreshold = ambiguityThreshold;
        this.invalidityThreshold = invalidityThreshold;
        this.languageHint = languageHint;
        this.languageHintWeight = languageHintWeight;
        this.encodingHint = encodingHint;
        this.encodingHintWeight = encodingHintWeight;
        this.languageWeightAdjustments = languageWeightAdjustments;
    }


    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public static class LanguageOptionsBuilder {
        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        private Boolean multilingual;
        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        private Integer minValidChars;
        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        private Integer profileDepth;
        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        private Double ambiguityThreshold;
        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        private Double invalidityThreshold;
        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        private LanguageCode languageHint;
        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        private Double languageHintWeight;
        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        private EncodingCode encodingHint;
        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        private Double encodingHintWeight;
        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        private Set<LanguageWeight> languageWeightAdjustments;

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        LanguageOptionsBuilder() {
        }

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public LanguageOptionsBuilder multilingual(final Boolean multilingual) {
            this.multilingual = multilingual;
            return this;
        }

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public LanguageOptionsBuilder minValidChars(final Integer minValidChars) {
            this.minValidChars = minValidChars;
            return this;
        }

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public LanguageOptionsBuilder profileDepth(final Integer profileDepth) {
            this.profileDepth = profileDepth;
            return this;
        }

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public LanguageOptionsBuilder ambiguityThreshold(final Double ambiguityThreshold) {
            this.ambiguityThreshold = ambiguityThreshold;
            return this;
        }

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public LanguageOptionsBuilder invalidityThreshold(final Double invalidityThreshold) {
            this.invalidityThreshold = invalidityThreshold;
            return this;
        }

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public LanguageOptionsBuilder languageHint(final LanguageCode languageHint) {
            this.languageHint = languageHint;
            return this;
        }

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public LanguageOptionsBuilder languageHintWeight(final Double languageHintWeight) {
            this.languageHintWeight = languageHintWeight;
            return this;
        }

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public LanguageOptionsBuilder encodingHint(final EncodingCode encodingHint) {
            this.encodingHint = encodingHint;
            return this;
        }

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public LanguageOptionsBuilder encodingHintWeight(final Double encodingHintWeight) {
            this.encodingHintWeight = encodingHintWeight;
            return this;
        }

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public LanguageOptionsBuilder languageWeightAdjustments(final Set<LanguageWeight> languageWeightAdjustments) {
            this.languageWeightAdjustments = languageWeightAdjustments;
            return this;
        }

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public LanguageOptions build() {
            return new LanguageOptions(multilingual, minValidChars, profileDepth, ambiguityThreshold, invalidityThreshold, languageHint, languageHintWeight, encodingHint, encodingHintWeight, languageWeightAdjustments);
        }

        @Override
        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public String toString() {
            return "LanguageOptions.LanguageOptionsBuilder(multilingual=" + this.multilingual + ", minValidChars=" + this.minValidChars + ", profileDepth=" + this.profileDepth + ", ambiguityThreshold=" + this.ambiguityThreshold + ", invalidityThreshold=" + this.invalidityThreshold + ", languageHint=" + this.languageHint + ", languageHintWeight=" + this.languageHintWeight + ", encodingHint=" + this.encodingHint + ", encodingHintWeight=" + this.encodingHintWeight + ", languageWeightAdjustments=" + this.languageWeightAdjustments + ")";
        }
    }

    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public static LanguageOptionsBuilder builder() {
        return new LanguageOptionsBuilder();
    }

    /**
     * @return whether to detect language regions
     */
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public Boolean getMultilingual() {
        return this.multilingual;
    }

    /**
     * @return minimum number of valid characters
     */
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public Integer getMinValidChars() {
        return this.minValidChars;
    }

    /**
     * @return the most frequent n-grams to consider in detection, smaller depth results in faster operation but lower detection accuracy
     */
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public Integer getProfileDepth() {
        return this.profileDepth;
    }

    /**
     * @return number of n-gram distance ambiguity threshold (0.0-100.0), input profile distances closer to each other than this threshold are deemed ambiguous
     */
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public Double getAmbiguityThreshold() {
        return this.ambiguityThreshold;
    }

    /**
     * @return number of n-gram distance invalidity threshold (0.0-100.0), input profile distance exceeding this threshold will be deemed invalid
     */
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public Double getInvalidityThreshold() {
        return this.invalidityThreshold;
    }

    /**
     * @return language hint
     */
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public LanguageCode getLanguageHint() {
        return this.languageHint;
    }

    /**
     * @return the language hint weight (1.0-99.0) used to help resolve ambiguous results.
     * A value of N reduces the distance of correctly hinted ambiguous result by N%.
     * Value of 1.0 is the lightest hint, value of 99.0 the strongest.
     */
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public Double getLanguageHintWeight() {
        return this.languageHintWeight;
    }

    /**
     * @return the encoding hint used to help resolve ambiguous results
     */
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public EncodingCode getEncodingHint() {
        return this.encodingHint;
    }

    /**
     * @return the encoding hint weight (1.0-100.0) used to help resolve ambiguous results.
     * A value of N reduces the distance of correctly hinted result by N%.
     * A value of 100 forces the detector to consider only the results with the hinted encoding.
     */
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public Double getEncodingHintWeight() {
        return this.encodingHintWeight;
    }

    /**
     * @return languageWeightAdjustments the set of language weight adjustments
     */
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public Set<LanguageWeight> getLanguageWeightAdjustments() {
        return this.languageWeightAdjustments;
    }

    @Override
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public boolean equals(final Object o) {
        if (o == this) return true;
        if (!(o instanceof LanguageOptions)) return false;
        final LanguageOptions other = (LanguageOptions) o;
        if (!other.canEqual((Object) this)) return false;
        if (!super.equals(o)) return false;
        final Object this$multilingual = this.getMultilingual();
        final Object other$multilingual = other.getMultilingual();
        if (this$multilingual == null ? other$multilingual != null : !this$multilingual.equals(other$multilingual)) return false;
        final Object this$minValidChars = this.getMinValidChars();
        final Object other$minValidChars = other.getMinValidChars();
        if (this$minValidChars == null ? other$minValidChars != null : !this$minValidChars.equals(other$minValidChars)) return false;
        final Object this$profileDepth = this.getProfileDepth();
        final Object other$profileDepth = other.getProfileDepth();
        if (this$profileDepth == null ? other$profileDepth != null : !this$profileDepth.equals(other$profileDepth)) return false;
        final Object this$ambiguityThreshold = this.getAmbiguityThreshold();
        final Object other$ambiguityThreshold = other.getAmbiguityThreshold();
        if (this$ambiguityThreshold == null ? other$ambiguityThreshold != null : !this$ambiguityThreshold.equals(other$ambiguityThreshold)) return false;
        final Object this$invalidityThreshold = this.getInvalidityThreshold();
        final Object other$invalidityThreshold = other.getInvalidityThreshold();
        if (this$invalidityThreshold == null ? other$invalidityThreshold != null : !this$invalidityThreshold.equals(other$invalidityThreshold)) return false;
        final Object this$languageHint = this.getLanguageHint();
        final Object other$languageHint = other.getLanguageHint();
        if (this$languageHint == null ? other$languageHint != null : !this$languageHint.equals(other$languageHint)) return false;
        final Object this$languageHintWeight = this.getLanguageHintWeight();
        final Object other$languageHintWeight = other.getLanguageHintWeight();
        if (this$languageHintWeight == null ? other$languageHintWeight != null : !this$languageHintWeight.equals(other$languageHintWeight)) return false;
        final Object this$encodingHint = this.getEncodingHint();
        final Object other$encodingHint = other.getEncodingHint();
        if (this$encodingHint == null ? other$encodingHint != null : !this$encodingHint.equals(other$encodingHint)) return false;
        final Object this$encodingHintWeight = this.getEncodingHintWeight();
        final Object other$encodingHintWeight = other.getEncodingHintWeight();
        if (this$encodingHintWeight == null ? other$encodingHintWeight != null : !this$encodingHintWeight.equals(other$encodingHintWeight)) return false;
        final Object this$languageWeightAdjustments = this.getLanguageWeightAdjustments();
        final Object other$languageWeightAdjustments = other.getLanguageWeightAdjustments();
        if (this$languageWeightAdjustments == null ? other$languageWeightAdjustments != null : !this$languageWeightAdjustments.equals(other$languageWeightAdjustments)) return false;
        return true;
    }

    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    protected boolean canEqual(final Object other) {
        return other instanceof LanguageOptions;
    }

    @Override
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        result = result * PRIME + super.hashCode();
        final Object $multilingual = this.getMultilingual();
        result = result * PRIME + ($multilingual == null ? 43 : $multilingual.hashCode());
        final Object $minValidChars = this.getMinValidChars();
        result = result * PRIME + ($minValidChars == null ? 43 : $minValidChars.hashCode());
        final Object $profileDepth = this.getProfileDepth();
        result = result * PRIME + ($profileDepth == null ? 43 : $profileDepth.hashCode());
        final Object $ambiguityThreshold = this.getAmbiguityThreshold();
        result = result * PRIME + ($ambiguityThreshold == null ? 43 : $ambiguityThreshold.hashCode());
        final Object $invalidityThreshold = this.getInvalidityThreshold();
        result = result * PRIME + ($invalidityThreshold == null ? 43 : $invalidityThreshold.hashCode());
        final Object $languageHint = this.getLanguageHint();
        result = result * PRIME + ($languageHint == null ? 43 : $languageHint.hashCode());
        final Object $languageHintWeight = this.getLanguageHintWeight();
        result = result * PRIME + ($languageHintWeight == null ? 43 : $languageHintWeight.hashCode());
        final Object $encodingHint = this.getEncodingHint();
        result = result * PRIME + ($encodingHint == null ? 43 : $encodingHint.hashCode());
        final Object $encodingHintWeight = this.getEncodingHintWeight();
        result = result * PRIME + ($encodingHintWeight == null ? 43 : $encodingHintWeight.hashCode());
        final Object $languageWeightAdjustments = this.getLanguageWeightAdjustments();
        result = result * PRIME + ($languageWeightAdjustments == null ? 43 : $languageWeightAdjustments.hashCode());
        return result;
    }

    @Override
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public String toString() {
        return "LanguageOptions(multilingual=" + this.getMultilingual() + ", minValidChars=" + this.getMinValidChars() + ", profileDepth=" + this.getProfileDepth() + ", ambiguityThreshold=" + this.getAmbiguityThreshold() + ", invalidityThreshold=" + this.getInvalidityThreshold() + ", languageHint=" + this.getLanguageHint() + ", languageHintWeight=" + this.getLanguageHintWeight() + ", encodingHint=" + this.getEncodingHint() + ", encodingHintWeight=" + this.getEncodingHintWeight() + ", languageWeightAdjustments=" + this.getLanguageWeightAdjustments() + ")";
    }
}
