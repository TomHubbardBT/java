// Generated by delombok at Mon Jan 22 15:21:35 EST 2018
/*
* Copyright 2017 Basis Technology Corp.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
package com.basistech.rosette.apimodel;

import javax.validation.constraints.NotNull;
import java.util.List;

/**
 * Request object for name-deduplication.
 *
 * This class carries the list of names to dedupe as well as the score threshold.
 */
public final class NameDeduplicationRequest extends Request {
    /**
     */
    @NotNull
    private final List<Name> names;
    /**
     */
    private final Double threshold;

    // workaround for inheritance https://github.com/rzwitserloot/lombok/issues/853
    public NameDeduplicationRequest(String profileId, List<Name> names, Double threshold) {
        super(profileId);
        this.names = names;
        this.threshold = threshold;
    }


    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public static class NameDeduplicationRequestBuilder {
        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        private String profileId;
        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        private List<Name> names;
        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        private Double threshold;

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        NameDeduplicationRequestBuilder() {
        }

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public NameDeduplicationRequestBuilder profileId(final String profileId) {
            this.profileId = profileId;
            return this;
        }

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public NameDeduplicationRequestBuilder names(final List<Name> names) {
            this.names = names;
            return this;
        }

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public NameDeduplicationRequestBuilder threshold(final Double threshold) {
            this.threshold = threshold;
            return this;
        }

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public NameDeduplicationRequest build() {
            return new NameDeduplicationRequest(profileId, names, threshold);
        }

        @Override
        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public String toString() {
            return "NameDeduplicationRequest.NameDeduplicationRequestBuilder(profileId=" + this.profileId + ", names=" + this.names + ", threshold=" + this.threshold + ")";
        }
    }

    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public static NameDeduplicationRequestBuilder builder() {
        return new NameDeduplicationRequestBuilder();
    }

    /**
     * @return the list of names
     */
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public List<Name> getNames() {
        return this.names;
    }

    /**
     * @return the threshold
     */
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public Double getThreshold() {
        return this.threshold;
    }

    @Override
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public boolean equals(final Object o) {
        if (o == this) return true;
        if (!(o instanceof NameDeduplicationRequest)) return false;
        final NameDeduplicationRequest other = (NameDeduplicationRequest) o;
        if (!other.canEqual((Object) this)) return false;
        if (!super.equals(o)) return false;
        final Object this$names = this.getNames();
        final Object other$names = other.getNames();
        if (this$names == null ? other$names != null : !this$names.equals(other$names)) return false;
        final Object this$threshold = this.getThreshold();
        final Object other$threshold = other.getThreshold();
        if (this$threshold == null ? other$threshold != null : !this$threshold.equals(other$threshold)) return false;
        return true;
    }

    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    protected boolean canEqual(final Object other) {
        return other instanceof NameDeduplicationRequest;
    }

    @Override
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        result = result * PRIME + super.hashCode();
        final Object $names = this.getNames();
        result = result * PRIME + ($names == null ? 43 : $names.hashCode());
        final Object $threshold = this.getThreshold();
        result = result * PRIME + ($threshold == null ? 43 : $threshold.hashCode());
        return result;
    }

    @Override
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public String toString() {
        return "NameDeduplicationRequest(names=" + this.getNames() + ", threshold=" + this.getThreshold() + ")";
    }
}
