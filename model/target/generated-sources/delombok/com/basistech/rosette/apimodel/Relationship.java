// Generated by delombok at Mon Jan 22 15:21:35 EST 2018
/*
* Copyright 2017 Basis Technology Corp.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
package com.basistech.rosette.apimodel;

import com.basistech.rosette.annotations.JacksonMixin;
import java.util.List;
import java.util.Set;

/**
 * Relationship extracted by the relationship extractor
 */
@JacksonMixin
public final class Relationship {
    /**
     */
    private final String predicate;
    /**
     */
    private final String predicateId;
    /**
     */
    private final String arg1;
    /**
     */
    private final String arg1Id;
    /**
     */
    private final String arg2;
    /**
     */
    private final String arg2Id;
    /**
     */
    private final String arg3;
    /**
     */
    private final String arg3Id;
    /**
     */
    private final List<String> adjuncts;
    /**
     */
    private final List<String> locatives;
    /**
     */
    private final List<String> temporals;
    /**
     */
    private final Set<String> modalities;
    /**
     */
    private final Double confidence;

    @java.beans.ConstructorProperties({"predicate", "predicateId", "arg1", "arg1Id", "arg2", "arg2Id", "arg3", "arg3Id", "adjuncts", "locatives", "temporals", "modalities", "confidence"})
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    Relationship(final String predicate, final String predicateId, final String arg1, final String arg1Id, final String arg2, final String arg2Id, final String arg3, final String arg3Id, final List<String> adjuncts, final List<String> locatives, final List<String> temporals, final Set<String> modalities, final Double confidence) {
        this.predicate = predicate;
        this.predicateId = predicateId;
        this.arg1 = arg1;
        this.arg1Id = arg1Id;
        this.arg2 = arg2;
        this.arg2Id = arg2Id;
        this.arg3 = arg3;
        this.arg3Id = arg3Id;
        this.adjuncts = adjuncts;
        this.locatives = locatives;
        this.temporals = temporals;
        this.modalities = modalities;
        this.confidence = confidence;
    }


    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public static class RelationshipBuilder {
        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        private String predicate;
        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        private String predicateId;
        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        private String arg1;
        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        private String arg1Id;
        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        private String arg2;
        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        private String arg2Id;
        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        private String arg3;
        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        private String arg3Id;
        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        private List<String> adjuncts;
        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        private List<String> locatives;
        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        private List<String> temporals;
        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        private Set<String> modalities;
        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        private Double confidence;

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        RelationshipBuilder() {
        }

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public RelationshipBuilder predicate(final String predicate) {
            this.predicate = predicate;
            return this;
        }

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public RelationshipBuilder predicateId(final String predicateId) {
            this.predicateId = predicateId;
            return this;
        }

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public RelationshipBuilder arg1(final String arg1) {
            this.arg1 = arg1;
            return this;
        }

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public RelationshipBuilder arg1Id(final String arg1Id) {
            this.arg1Id = arg1Id;
            return this;
        }

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public RelationshipBuilder arg2(final String arg2) {
            this.arg2 = arg2;
            return this;
        }

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public RelationshipBuilder arg2Id(final String arg2Id) {
            this.arg2Id = arg2Id;
            return this;
        }

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public RelationshipBuilder arg3(final String arg3) {
            this.arg3 = arg3;
            return this;
        }

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public RelationshipBuilder arg3Id(final String arg3Id) {
            this.arg3Id = arg3Id;
            return this;
        }

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public RelationshipBuilder adjuncts(final List<String> adjuncts) {
            this.adjuncts = adjuncts;
            return this;
        }

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public RelationshipBuilder locatives(final List<String> locatives) {
            this.locatives = locatives;
            return this;
        }

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public RelationshipBuilder temporals(final List<String> temporals) {
            this.temporals = temporals;
            return this;
        }

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public RelationshipBuilder modalities(final Set<String> modalities) {
            this.modalities = modalities;
            return this;
        }

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public RelationshipBuilder confidence(final Double confidence) {
            this.confidence = confidence;
            return this;
        }

        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public Relationship build() {
            return new Relationship(predicate, predicateId, arg1, arg1Id, arg2, arg2Id, arg3, arg3Id, adjuncts, locatives, temporals, modalities, confidence);
        }

        @Override
        @SuppressWarnings("all")
        @javax.annotation.Generated("lombok")
        public String toString() {
            return "Relationship.RelationshipBuilder(predicate=" + this.predicate + ", predicateId=" + this.predicateId + ", arg1=" + this.arg1 + ", arg1Id=" + this.arg1Id + ", arg2=" + this.arg2 + ", arg2Id=" + this.arg2Id + ", arg3=" + this.arg3 + ", arg3Id=" + this.arg3Id + ", adjuncts=" + this.adjuncts + ", locatives=" + this.locatives + ", temporals=" + this.temporals + ", modalities=" + this.modalities + ", confidence=" + this.confidence + ")";
        }
    }

    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public static RelationshipBuilder builder() {
        return new RelationshipBuilder();
    }

    /**
     * @return the relationship predicate
     */
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public String getPredicate() {
        return this.predicate;
    }

    /**
     * @return the relationship predicate'sID
     */
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public String getPredicateId() {
        return this.predicateId;
    }

    /**
     * @return the first arg
     */
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public String getArg1() {
        return this.arg1;
    }

    /**
     * @return the first arg's ID
     */
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public String getArg1Id() {
        return this.arg1Id;
    }

    /**
     * @return the second arg
     */
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public String getArg2() {
        return this.arg2;
    }

    /**
     * @return the second arg's ID
     */
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public String getArg2Id() {
        return this.arg2Id;
    }

    /**
     * @return the third arg
     */
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public String getArg3() {
        return this.arg3;
    }

    /**
     * @return the third arg's ID
     */
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public String getArg3Id() {
        return this.arg3Id;
    }

    /**
     * @return a list of adjuncts
     */
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public List<String> getAdjuncts() {
        return this.adjuncts;
    }

    /**
     * @return a list of locatives
     */
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public List<String> getLocatives() {
        return this.locatives;
    }

    /**
     * @return a list of temporals
     */
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public List<String> getTemporals() {
        return this.temporals;
    }

    /**
     * @return modalities
     */
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public Set<String> getModalities() {
        return this.modalities;
    }

    /**
     * @return the confidence (0.0-1.0)
     */
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public Double getConfidence() {
        return this.confidence;
    }

    @Override
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public boolean equals(final Object o) {
        if (o == this) return true;
        if (!(o instanceof Relationship)) return false;
        final Relationship other = (Relationship) o;
        final Object this$predicate = this.getPredicate();
        final Object other$predicate = other.getPredicate();
        if (this$predicate == null ? other$predicate != null : !this$predicate.equals(other$predicate)) return false;
        final Object this$predicateId = this.getPredicateId();
        final Object other$predicateId = other.getPredicateId();
        if (this$predicateId == null ? other$predicateId != null : !this$predicateId.equals(other$predicateId)) return false;
        final Object this$arg1 = this.getArg1();
        final Object other$arg1 = other.getArg1();
        if (this$arg1 == null ? other$arg1 != null : !this$arg1.equals(other$arg1)) return false;
        final Object this$arg1Id = this.getArg1Id();
        final Object other$arg1Id = other.getArg1Id();
        if (this$arg1Id == null ? other$arg1Id != null : !this$arg1Id.equals(other$arg1Id)) return false;
        final Object this$arg2 = this.getArg2();
        final Object other$arg2 = other.getArg2();
        if (this$arg2 == null ? other$arg2 != null : !this$arg2.equals(other$arg2)) return false;
        final Object this$arg2Id = this.getArg2Id();
        final Object other$arg2Id = other.getArg2Id();
        if (this$arg2Id == null ? other$arg2Id != null : !this$arg2Id.equals(other$arg2Id)) return false;
        final Object this$arg3 = this.getArg3();
        final Object other$arg3 = other.getArg3();
        if (this$arg3 == null ? other$arg3 != null : !this$arg3.equals(other$arg3)) return false;
        final Object this$arg3Id = this.getArg3Id();
        final Object other$arg3Id = other.getArg3Id();
        if (this$arg3Id == null ? other$arg3Id != null : !this$arg3Id.equals(other$arg3Id)) return false;
        final Object this$adjuncts = this.getAdjuncts();
        final Object other$adjuncts = other.getAdjuncts();
        if (this$adjuncts == null ? other$adjuncts != null : !this$adjuncts.equals(other$adjuncts)) return false;
        final Object this$locatives = this.getLocatives();
        final Object other$locatives = other.getLocatives();
        if (this$locatives == null ? other$locatives != null : !this$locatives.equals(other$locatives)) return false;
        final Object this$temporals = this.getTemporals();
        final Object other$temporals = other.getTemporals();
        if (this$temporals == null ? other$temporals != null : !this$temporals.equals(other$temporals)) return false;
        final Object this$modalities = this.getModalities();
        final Object other$modalities = other.getModalities();
        if (this$modalities == null ? other$modalities != null : !this$modalities.equals(other$modalities)) return false;
        final Object this$confidence = this.getConfidence();
        final Object other$confidence = other.getConfidence();
        if (this$confidence == null ? other$confidence != null : !this$confidence.equals(other$confidence)) return false;
        return true;
    }

    @Override
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final Object $predicate = this.getPredicate();
        result = result * PRIME + ($predicate == null ? 43 : $predicate.hashCode());
        final Object $predicateId = this.getPredicateId();
        result = result * PRIME + ($predicateId == null ? 43 : $predicateId.hashCode());
        final Object $arg1 = this.getArg1();
        result = result * PRIME + ($arg1 == null ? 43 : $arg1.hashCode());
        final Object $arg1Id = this.getArg1Id();
        result = result * PRIME + ($arg1Id == null ? 43 : $arg1Id.hashCode());
        final Object $arg2 = this.getArg2();
        result = result * PRIME + ($arg2 == null ? 43 : $arg2.hashCode());
        final Object $arg2Id = this.getArg2Id();
        result = result * PRIME + ($arg2Id == null ? 43 : $arg2Id.hashCode());
        final Object $arg3 = this.getArg3();
        result = result * PRIME + ($arg3 == null ? 43 : $arg3.hashCode());
        final Object $arg3Id = this.getArg3Id();
        result = result * PRIME + ($arg3Id == null ? 43 : $arg3Id.hashCode());
        final Object $adjuncts = this.getAdjuncts();
        result = result * PRIME + ($adjuncts == null ? 43 : $adjuncts.hashCode());
        final Object $locatives = this.getLocatives();
        result = result * PRIME + ($locatives == null ? 43 : $locatives.hashCode());
        final Object $temporals = this.getTemporals();
        result = result * PRIME + ($temporals == null ? 43 : $temporals.hashCode());
        final Object $modalities = this.getModalities();
        result = result * PRIME + ($modalities == null ? 43 : $modalities.hashCode());
        final Object $confidence = this.getConfidence();
        result = result * PRIME + ($confidence == null ? 43 : $confidence.hashCode());
        return result;
    }

    @Override
    @SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public String toString() {
        return "Relationship(predicate=" + this.getPredicate() + ", predicateId=" + this.getPredicateId() + ", arg1=" + this.getArg1() + ", arg1Id=" + this.getArg1Id() + ", arg2=" + this.getArg2() + ", arg2Id=" + this.getArg2Id() + ", arg3=" + this.getArg3() + ", arg3Id=" + this.getArg3Id() + ", adjuncts=" + this.getAdjuncts() + ", locatives=" + this.getLocatives() + ", temporals=" + this.getTemporals() + ", modalities=" + this.getModalities() + ", confidence=" + this.getConfidence() + ")";
    }
}
